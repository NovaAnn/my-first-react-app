{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\samue\\\\Desktop\\\\src-React\\\\src\\\\components\\\\Layout\\\\Checkout.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from \"react\";\nimport classes from \"./Checkout.module.css\";\nimport { CardElement } from \"@stripe/react-stripe-js\";\nimport axios from \"axios\";\nimport { useElements, useStripe } from \"@stripe/react-stripe-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isEmpty = value => value.trim() === \"\";\n\nconst isFiveChars = value => value.trim().length === 5;\n\nconst Checkout = props => {\n  _s();\n\n  const [formInputsValidity, setFormInputsValidity] = useState({\n    name: true,\n    street: true,\n    city: true,\n    postalCode: true\n  });\n  const stripe = useStripe();\n  const elements = useElements();\n  const nameInputRef = useRef();\n  const streetInputRef = useRef();\n  const postalCodeInputRef = useRef();\n  const cityInputRef = useRef();\n\n  const confirmHandler = async event => {\n    event.preventDefault();\n    const enteredName = nameInputRef.current.value;\n    const enteredStreet = streetInputRef.current.value;\n    const enteredPostalCode = postalCodeInputRef.current.value;\n    const enteredCity = cityInputRef.current.value;\n    const enteredNameIsValid = !isEmpty(enteredName);\n    const enteredStreetIsValid = !isEmpty(enteredStreet);\n    const enteredCityIsValid = !isEmpty(enteredCity);\n    const enteredPostalCodeIsValid = isFiveChars(enteredPostalCode);\n    setFormInputsValidity({\n      name: enteredNameIsValid,\n      street: enteredStreetIsValid,\n      city: enteredCityIsValid,\n      postalCode: enteredPostalCodeIsValid\n    });\n    const formIsValid = enteredNameIsValid && enteredStreetIsValid && enteredCityIsValid && enteredPostalCodeIsValid;\n\n    if (!formIsValid) {\n      return;\n    }\n\n    const result = await props.onConfirm({\n      name: enteredName,\n      street: enteredStreet,\n      city: enteredCity,\n      postalCode: enteredPostalCode\n    });\n    console.log(result);\n    const cardElement = elements.getElement(CardElement);\n    const paymentMethodReq = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement,\n      billing_details: {\n        name: enteredName,\n        address: {\n          city: enteredCity,\n          line1: enteredStreet,\n          postal_code: enteredPostalCode\n        }\n      }\n    });\n    const confirmPayment = await stripe.createPaymentMethod(result, {\n      payment_method: paymentMethodReq.paymentMethod.id\n    });\n    console.log(confirmPayment);\n  };\n\n  const nameControlClasses = `${classes.control} ${formInputsValidity.name ? \"\" : classes.invalid}`;\n  const streetControlClasses = `${classes.control} ${formInputsValidity.street ? \"\" : classes.invalid}`;\n  const postalCodeControlClasses = `${classes.control} ${formInputsValidity.postalCode ? \"\" : classes.invalid}`;\n  const cityControlClasses = `${classes.control} ${formInputsValidity.city ? \"\" : classes.invalid}`;\n  const cardElementStyles = {\n    style: {\n      base: {\n        color: 'blue'\n      },\n      invalid: {\n        color: 'red'\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    onSubmit: confirmHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        ref: nameInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), !formInputsValidity.name && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid name!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 38\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: streetControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"street\",\n        children: \"Street\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"street\",\n        ref: streetInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), !formInputsValidity.street && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid street!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 40\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: postalCodeControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postal\",\n        children: \"Postal Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postal\",\n        ref: postalCodeInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), !formInputsValidity.postalCode && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid postal code (5 characters long)!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cityControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"city\",\n        ref: cityInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), !formInputsValidity.city && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid city!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 38\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.cardElement,\n      children: /*#__PURE__*/_jsxDEV(CardElement, {\n        options: cardElementStyles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 44\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.actions,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: props.onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.submit,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checkout, \"pP27L5K+rT04l2Ttd/efRKhkVdI=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["C:/Users/samue/Desktop/src-React/src/components/Layout/Checkout.js"],"names":["useRef","useState","classes","CardElement","axios","useElements","useStripe","isEmpty","value","trim","isFiveChars","length","Checkout","props","formInputsValidity","setFormInputsValidity","name","street","city","postalCode","stripe","elements","nameInputRef","streetInputRef","postalCodeInputRef","cityInputRef","confirmHandler","event","preventDefault","enteredName","current","enteredStreet","enteredPostalCode","enteredCity","enteredNameIsValid","enteredStreetIsValid","enteredCityIsValid","enteredPostalCodeIsValid","formIsValid","result","onConfirm","console","log","cardElement","getElement","paymentMethodReq","createPaymentMethod","type","card","billing_details","address","line1","postal_code","confirmPayment","payment_method","paymentMethod","id","nameControlClasses","control","invalid","streetControlClasses","postalCodeControlClasses","cityControlClasses","cardElementStyles","style","base","color","form","actions","onCancel","submit"],"mappings":"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","sourcesContent":["import { useRef, useState } from \"react\";\r\n\r\nimport classes from \"./Checkout.module.css\";\r\nimport { CardElement } from \"@stripe/react-stripe-js\";\r\nimport axios from \"axios\";\r\nimport { useElements,useStripe } from \"@stripe/react-stripe-js\";\r\n\r\n\r\nconst isEmpty = (value) => value.trim() === \"\";\r\nconst isFiveChars = (value) => value.trim().length === 5;\r\n\r\n\r\nconst Checkout = (props) => {\r\n  const [formInputsValidity, setFormInputsValidity] = useState({\r\n    name: true,\r\n    street: true,\r\n    city: true,\r\n    postalCode: true,\r\n  });\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  const nameInputRef = useRef();\r\n  const streetInputRef = useRef();\r\n  const postalCodeInputRef = useRef();\r\n  const cityInputRef = useRef();\r\n\r\n  const confirmHandler = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const enteredName = nameInputRef.current.value;\r\n    const enteredStreet = streetInputRef.current.value;\r\n    const enteredPostalCode = postalCodeInputRef.current.value;\r\n    const enteredCity = cityInputRef.current.value;\r\n\r\n    const enteredNameIsValid = !isEmpty(enteredName);\r\n    const enteredStreetIsValid = !isEmpty(enteredStreet);\r\n    const enteredCityIsValid = !isEmpty(enteredCity);\r\n    const enteredPostalCodeIsValid = isFiveChars(enteredPostalCode);\r\n\r\n    setFormInputsValidity({\r\n      name: enteredNameIsValid,\r\n      street: enteredStreetIsValid,\r\n      city: enteredCityIsValid,\r\n      postalCode: enteredPostalCodeIsValid,\r\n    });\r\n\r\n    const formIsValid =\r\n      enteredNameIsValid &&\r\n      enteredStreetIsValid &&\r\n      enteredCityIsValid &&\r\n      enteredPostalCodeIsValid;\r\n\r\n    if (!formIsValid) {\r\n      return;\r\n    }\r\n\r\n    const result = await props.onConfirm({\r\n      name: enteredName,\r\n      street: enteredStreet,\r\n      city: enteredCity,\r\n      postalCode: enteredPostalCode,\r\n    });\r\n    console.log(result);\r\n    const cardElement = elements.getElement(CardElement);\r\n    const paymentMethodReq = await stripe.createPaymentMethod({\r\n      type:'card',\r\n      card:cardElement,\r\n      billing_details: {\r\n        name:enteredName,\r\n        address:{\r\n          city:enteredCity,\r\n          line1:enteredStreet,\r\n          postal_code:enteredPostalCode\r\n        }\r\n      }\r\n    });\r\n    const confirmPayment = await stripe.createPaymentMethod(result,{\r\n      payment_method:paymentMethodReq.paymentMethod.id,\r\n    });\r\n    console.log(confirmPayment);\r\n  };\r\n\r\n  const nameControlClasses = `${classes.control} ${\r\n    formInputsValidity.name ? \"\" : classes.invalid\r\n  }`;\r\n  const streetControlClasses = `${classes.control} ${\r\n    formInputsValidity.street ? \"\" : classes.invalid\r\n  }`;\r\n  const postalCodeControlClasses = `${classes.control} ${\r\n    formInputsValidity.postalCode ? \"\" : classes.invalid\r\n  }`;\r\n  const cityControlClasses = `${classes.control} ${\r\n    formInputsValidity.city ? \"\" : classes.invalid\r\n  }`;\r\n\r\n  const cardElementStyles ={\r\n    style:{\r\n      base:{\r\n       \r\n        color:'blue',\r\n       \r\n\r\n      },\r\n      invalid:{\r\n        color:'red',\r\n      }\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <form className={classes.form} onSubmit={confirmHandler}>\r\n      <div className={nameControlClasses}>\r\n        <label htmlFor=\"name\">Your Name</label>\r\n        <input type=\"text\" id=\"name\" ref={nameInputRef} />\r\n        {!formInputsValidity.name && <p>Please enter a valid name!</p>}\r\n      </div>\r\n      <div className={streetControlClasses}>\r\n        <label htmlFor=\"street\">Street</label>\r\n        <input type=\"text\" id=\"street\" ref={streetInputRef} />\r\n        {!formInputsValidity.street && <p>Please enter a valid street!</p>}\r\n      </div>\r\n      <div className={postalCodeControlClasses}>\r\n        <label htmlFor=\"postal\">Postal Code</label>\r\n        <input type=\"text\" id=\"postal\" ref={postalCodeInputRef} />\r\n        {!formInputsValidity.postalCode && (\r\n          <p>Please enter a valid postal code (5 characters long)!</p>\r\n        )}\r\n      </div>\r\n      <div className={cityControlClasses}>\r\n        <label htmlFor=\"city\">City</label>\r\n        <input type=\"text\" id=\"city\" ref={cityInputRef} />\r\n        {!formInputsValidity.city && <p>Please enter a valid city!</p>}\r\n      </div>\r\n      <div className={classes.cardElement}><CardElement options={cardElementStyles}></CardElement></div>\r\n      \r\n      <div className={classes.actions}>\r\n        <button type=\"button\" onClick={props.onCancel}>\r\n          Cancel\r\n        </button>\r\n        <button className={classes.submit}>Confirm</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Checkout;\r\n"]},"metadata":{},"sourceType":"module"}