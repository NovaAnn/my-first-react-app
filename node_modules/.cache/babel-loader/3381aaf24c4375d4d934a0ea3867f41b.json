{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\samue\\\\Desktop\\\\src-React\\\\src\\\\components\\\\Auth\\\\AuthForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport AuthContext from \"../../store/auth-context\";\nimport classes from \"./AuthForm.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet inputValue;\nlet graphqlQuery;\n\nconst AuthForm = props => {\n  _s();\n\n  const history = useHistory();\n  const emailInputRef = useRef();\n  const authCtx = useContext(AuthContext);\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const passwordInputRef = useRef();\n\n  if (props.emailId) {\n    inputValue = props.emailId;\n    setIsLogin(false);\n  } else {\n    inputValue = \"\";\n  }\n\n  const switchAuthModeHandler = () => {\n    setIsLogin(prevState => !prevState);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value; // optional: Add validation\n\n    setIsLoading(true);\n    let url;\n\n    if (isLogin) {\n      graphqlQuery = {\n        query: ` query {\n          login(email:\"novaannthomas@gmail.com\",\n            password:\"Neethunova17\") {\n                token\n        } \n            \n               \n          }`\n      };\n    } else {\n      graphqlQuery = {\n        query: `mutation {\n            createUser(userInput: {email:\"novaannthomas@gmail.com\", password:\"Neethunova17\"}) {\n                token\n               \n            }\n          }`\n      };\n    } //   fetch(url, {\n    //     method: \"POST\",\n    //     body: JSON.stringify({\n    //       email: enteredEmail,\n    //       password: enteredPassword,\n    //       returnSecureToken: true,\n    //     }),\n    //     headers: {\n    //       \"Content-Type\": \"application/json\",\n    //     },\n    //   })\n    //     .then((res) => {\n    //       setIsLoading(false);\n    //       if (res.ok) {\n    //         return res.json();\n    //       } else {\n    //         return res.json().then((data) => {\n    //           let errorMessage = \"Authentication failed!\";\n    //           // if (data && data.error && data.error.message) {\n    //           //   errorMessage = data.error.message;\n    //           // }\n    //           throw new Error(errorMessage);\n    //         });\n    //       }\n    //     })\n    //     .then((data) => {\n    //       const expirationTime = new Date(\n    //         new Date().getTime() + +data.expiresIn * 1000\n    //       );\n    //       authCtx.login(data.idToken, expirationTime.toISOString());\n    //       history.replace(\"/\");\n    //     })\n    //     .catch((err) => {\n    //       alert(err.message);\n    //     });\n    //\n\n\n    console.log(graphqlQuery);\n    fetch(\"http://localhost:8000/graphql\", {\n      method: \"POST\",\n      body: JSON.stringify(graphqlQuery),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      setIsLoading(false);\n      return res.json();\n    }).then(resData => {\n      console.log(resData.data);\n\n      if (resData.data) {\n        const expirationTime = new Date(new Date().getTime() + 3600 * 1000);\n        console.log(expirationTime);\n\n        if (isLogin) {\n          console.log(resData.data.login.token);\n          authCtx.login(resData.data.login.token, expirationTime.toISOString());\n        } else {\n          authCtx.login(resData.data.createUser.token, expirationTime.toISOString());\n        }\n\n        history.replace(\"/\");\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.auth,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: isLogin ? \"Login\" : \"Sign Up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Your Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          required: true,\n          ref: emailInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Your Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          required: true,\n          ref: passwordInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: [!isLoading && /*#__PURE__*/_jsxDEV(\"button\", {\n          children: isLogin ? \"Login\" : \"Create Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Sending request...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: classes.toggle,\n          onClick: switchAuthModeHandler,\n          children: isLogin ? \"Create new account\" : \"Login with existing account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthForm, \"Il/m3YqpgK9pfoy3hM0FvJXBT/Y=\", false, function () {\n  return [useHistory];\n});\n\n_c = AuthForm;\nexport default AuthForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthForm\");","map":{"version":3,"sources":["C:/Users/samue/Desktop/src-React/src/components/Auth/AuthForm.js"],"names":["useState","useRef","useContext","useHistory","AuthContext","classes","inputValue","graphqlQuery","AuthForm","props","history","emailInputRef","authCtx","isLogin","setIsLogin","isLoading","setIsLoading","passwordInputRef","emailId","switchAuthModeHandler","prevState","submitHandler","event","preventDefault","enteredEmail","current","value","enteredPassword","url","query","console","log","fetch","method","body","JSON","stringify","headers","then","res","json","resData","data","expirationTime","Date","getTime","login","token","toISOString","createUser","replace","auth","control","actions","toggle"],"mappings":"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","sourcesContent":["import { useState, useRef, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport AuthContext from \"../../store/auth-context\";\nimport classes from \"./AuthForm.module.css\";\nlet inputValue;\nlet graphqlQuery;\nconst AuthForm = (props) => {\n  const history = useHistory();\n  const emailInputRef = useRef();\n\n  const authCtx = useContext(AuthContext);\n\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const passwordInputRef = useRef();\n  if (props.emailId) {\n    inputValue = props.emailId;\n\n    setIsLogin(false);\n  } else {\n    inputValue = \"\";\n  }\n  const switchAuthModeHandler = () => {\n    setIsLogin((prevState) => !prevState);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value;\n\n    // optional: Add validation\n\n    setIsLoading(true);\n    let url;\n    if (isLogin) {\n      graphqlQuery = {\n        query: ` query {\n          login(email:\"novaannthomas@gmail.com\",\n            password:\"Neethunova17\") {\n                token\n        } \n            \n               \n          }`,\n      };\n    } else {\n      graphqlQuery = {\n        query: `mutation {\n            createUser(userInput: {email:\"novaannthomas@gmail.com\", password:\"Neethunova17\"}) {\n                token\n               \n            }\n          }`,\n      };\n    }\n    //   fetch(url, {\n    //     method: \"POST\",\n    //     body: JSON.stringify({\n    //       email: enteredEmail,\n    //       password: enteredPassword,\n    //       returnSecureToken: true,\n    //     }),\n    //     headers: {\n    //       \"Content-Type\": \"application/json\",\n    //     },\n    //   })\n    //     .then((res) => {\n    //       setIsLoading(false);\n    //       if (res.ok) {\n    //         return res.json();\n    //       } else {\n    //         return res.json().then((data) => {\n    //           let errorMessage = \"Authentication failed!\";\n    //           // if (data && data.error && data.error.message) {\n    //           //   errorMessage = data.error.message;\n    //           // }\n\n    //           throw new Error(errorMessage);\n    //         });\n    //       }\n    //     })\n    //     .then((data) => {\n    //       const expirationTime = new Date(\n    //         new Date().getTime() + +data.expiresIn * 1000\n    //       );\n    //       authCtx.login(data.idToken, expirationTime.toISOString());\n    //       history.replace(\"/\");\n    //     })\n    //     .catch((err) => {\n    //       alert(err.message);\n    //     });\n    //\n    console.log(graphqlQuery);\n    fetch(\"http://localhost:8000/graphql\", {\n      method: \"POST\",\n      body: JSON.stringify(graphqlQuery),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        setIsLoading(false);\n        return res.json();\n      })\n      .then((resData) => {\n        console.log(resData.data);\n        if (resData.data) {\n          const expirationTime = new Date(new Date().getTime() + 3600 * 1000);\n          console.log(expirationTime);\n          if (isLogin) {\n            console.log(resData.data.login.token);\n            authCtx.login(\n              resData.data.login.token,\n              expirationTime.toISOString()\n            );\n          } else {\n            authCtx.login(\n              resData.data.createUser.token,\n              expirationTime.toISOString()\n            );\n          }\n          history.replace(\"/\");\n        }\n      });\n  };\n\n  return (\n    <section className={classes.auth}>\n      <h1>{isLogin ? \"Login\" : \"Sign Up\"}</h1>\n      <form onSubmit={submitHandler}>\n        <div className={classes.control}>\n          <label htmlFor=\"email\">Your Email</label>\n          <input type=\"email\" id=\"email\" required ref={emailInputRef} />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor=\"password\">Your Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            required\n            ref={passwordInputRef}\n          />\n        </div>\n        <div className={classes.actions}>\n          {!isLoading && (\n            <button>{isLogin ? \"Login\" : \"Create Account\"}</button>\n          )}\n          {isLoading && <p>Sending request...</p>}\n          <button\n            type=\"button\"\n            className={classes.toggle}\n            onClick={switchAuthModeHandler}\n          >\n            {isLogin ? \"Create new account\" : \"Login with existing account\"}\n          </button>\n        </div>\n      </form>\n    </section>\n  );\n};\n\nexport default AuthForm;\n"]},"metadata":{},"sourceType":"module"}