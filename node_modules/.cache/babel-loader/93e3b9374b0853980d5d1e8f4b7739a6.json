{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\samue\\\\Desktop\\\\src-React\\\\src\\\\components\\\\Profile\\\\PreviousOrders.js\",\n    _s = $RefreshSig$();\n\nimport PreviousOrderItem from \"./PreviousOrderItem\";\nimport classes from \"./PreviousOrders.module.css\";\nimport { useState, useContext } from \"react\";\nimport AuthContext from \"../../store/auth-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet orderItem;\nlet fetchData;\nlet noOfPages = 1;\nlet startIndx;\nlet stopIndx;\n\nconst PreviousOrders = () => {\n  _s();\n\n  const authCtx = useContext(AuthContext);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const pageHandler = e => {\n    const target = e.target;\n    const span = target.dataset.span;\n\n    if (+span === 0) {\n      setCurrentPage(currentPage - 1);\n    } else if (+span === 1) {\n      setCurrentPage(currentPage + 1);\n    }\n  };\n\n  startIndx = (currentPage - 1) * 2;\n  stopIndx = startIndx + 2;\n  const [fetchData, setFetchData] = useState(false);\n  const graphqlQuery = {\n    query: ` query {\n          getPreviousOrders {\n            orders{\n              _id\n              products{\n                product{\n                  _id\n                  title\n                  imageUrl\n                  price\n                       }\n                quantity\n                       }\n            }\n    \n  }   \n               \n          }`\n  };\n\n  const fetchOrders = async function () {\n    const data = await fetch(\"http://localhost:8000/graphql\", {\n      method: \"POST\",\n      body: JSON.stringify(graphqlQuery),\n      headers: {\n        Authorization: \"Bearer \" + authCtx.token,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const response = await data.json();\n    const arrayObj = response.data.getPreviousOrders.orders;\n    orderItem = arrayObj.map((item, i) => {\n      const totalAmount = item.products.reduce((acc, curr) => {\n        return acc + curr.product.price * curr.quantity;\n      }, 0);\n      return {\n        id: item._id,\n        items: item.products,\n        totalAmount\n      };\n    });\n    noOfPages = Math.ceil(orderItem.length / 2);\n    setFetchData(true);\n  };\n\n  fetchOrders();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.mainDiv,\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Order History\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [fetchData && orderItem.length > 0 && orderItem.slice(startIndx, stopIndx).map((item, ind) => /*#__PURE__*/_jsxDEV(PreviousOrderItem, {\n        list: item,\n        indx: (currentPage - 1) * 2 + ind + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 15\n      }, this)), fetchData && orderItem.length < 1 && /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"No previous orders to display\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), fetchData && orderItem.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.btnGrp,\n      children: [currentPage > 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: pageHandler,\n        \"data-span\": 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: currentPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), currentPage < noOfPages && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: pageHandler,\n        \"data-span\": 1,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PreviousOrders, \"n7rrMme14O0fHgWmS8Gzr5U3mNI=\");\n\n_c = PreviousOrders;\nexport default PreviousOrders;\n\nvar _c;\n\n$RefreshReg$(_c, \"PreviousOrders\");","map":{"version":3,"sources":["C:/Users/samue/Desktop/src-React/src/components/Profile/PreviousOrders.js"],"names":["PreviousOrderItem","classes","useState","useContext","AuthContext","orderItem","fetchData","noOfPages","startIndx","stopIndx","PreviousOrders","authCtx","currentPage","setCurrentPage","pageHandler","e","target","span","dataset","setFetchData","graphqlQuery","query","fetchOrders","data","fetch","method","body","JSON","stringify","headers","Authorization","token","response","json","arrayObj","getPreviousOrders","orders","map","item","i","totalAmount","products","reduce","acc","curr","product","price","quantity","id","_id","items","Math","ceil","length","mainDiv","slice","ind","btnGrp"],"mappings":"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","sourcesContent":["import PreviousOrderItem from \"./PreviousOrderItem\";\r\nimport classes from \"./PreviousOrders.module.css\";\r\nimport { useState, useContext } from \"react\";\r\nimport AuthContext from \"../../store/auth-context\";\r\n\r\nlet orderItem;\r\nlet fetchData;\r\nlet noOfPages = 1;\r\n\r\nlet startIndx;\r\nlet stopIndx;\r\nconst PreviousOrders = () => {\r\n  const authCtx = useContext(AuthContext);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  const pageHandler = (e) => {\r\n    const target = e.target;\r\n    const span = target.dataset.span;\r\n\r\n\r\n    if (+span === 0) {\r\n      setCurrentPage(currentPage - 1);\r\n    } else if (+span === 1) {\r\n      setCurrentPage(currentPage + 1);\r\n    }\r\n  };\r\n  startIndx = (currentPage - 1) * 2;\r\n  stopIndx = startIndx + 2;\r\n\r\n  const [fetchData, setFetchData] = useState(false);\r\n  const graphqlQuery = {\r\n    query: ` query {\r\n          getPreviousOrders {\r\n            orders{\r\n              _id\r\n              products{\r\n                product{\r\n                  _id\r\n                  title\r\n                  imageUrl\r\n                  price\r\n                       }\r\n                quantity\r\n                       }\r\n            }\r\n    \r\n  }   \r\n               \r\n          }`,\r\n  };\r\n  const fetchOrders = async function () {\r\n  \r\n    const data = await fetch(\"http://localhost:8000/graphql\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(graphqlQuery),\r\n      headers: {\r\n        Authorization: \"Bearer \" + authCtx.token,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    const response = await data.json();\r\n\r\n    const arrayObj = response.data.getPreviousOrders.orders;\r\n    orderItem = arrayObj.map((item, i) => {\r\n     \r\n      const totalAmount = item.products.reduce((acc,curr)=>{\r\n        return acc + ( curr.product.price * curr.quantity)\r\n      },0)\r\n      return {\r\n        id: item._id,\r\n        items: item.products,\r\n        totalAmount,\r\n      };\r\n    });\r\n\r\n    noOfPages = Math.ceil(orderItem.length / 2);\r\n    setFetchData(true);\r\n  };\r\n  fetchOrders();\r\n  return (\r\n    <div className={classes.mainDiv}>\r\n      <h5>Order History</h5>\r\n      <ul>\r\n        {fetchData && orderItem.length > 0 &&\r\n          orderItem\r\n            .slice(startIndx, stopIndx)\r\n            .map((item, ind) => (\r\n              <PreviousOrderItem\r\n                list={item}\r\n                indx={(currentPage - 1) * 2 + ind + 1}\r\n              />\r\n            ))}\r\n            {fetchData && orderItem.length < 1 &&\r\n            <h5>No previous orders to display</h5>\r\n         }\r\n      </ul>\r\n      {fetchData && orderItem.length > 0 &&  (\r\n        <div className={classes.btnGrp}>\r\n          {currentPage > 1 && (\r\n            <button onClick={pageHandler} data-span={0}>\r\n              Previous\r\n            </button>\r\n          )}\r\n          <button>{currentPage}</button>\r\n\r\n          {currentPage < noOfPages && (\r\n            <button onClick={pageHandler} data-span={1}>\r\n              Next\r\n            </button>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PreviousOrders;\r\n"]},"metadata":{},"sourceType":"module"}